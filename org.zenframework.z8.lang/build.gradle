import org.gradle.api.Plugin
import org.gradle.api.Project

class BlPlugin implements Plugin<Project> {
	void apply(Project project) {
		project.configurations {
			bl {
				canBeResolved = false
				canBeConsumed = true
				attributes {
					attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE,
							project.objects.named(LibraryElements, 'bl'))
				}
			}
		}
		project.components.findByName('java').addVariantsFromConfiguration(project.configurations.bl) {
			it.mapToMavenScope('compile')
		}
	}
}

apply plugin: 'java'
apply plugin: BlPlugin

eclipse {
	project.natures 'org.zenframework.z8.pde.ProjectNature'
}

configurations {
	compiler
}

dependencies {
	implementation project(':org.zenframework.z8.server')

	compiler project(':org.zenframework.z8.compiler')
}

task compileBl(type: JavaExec) {
	group = 'Build'
	description = 'Compile BL sources'

	classpath = configurations.compiler
	main = 'org.zenframework.z8.compiler.cmd.Main'
	args = [ projectDir, "-projectName:${project.name}", "-sources:src/bl", "-output:${projectDir}/.java" ]
}

sourceSets {
	main.java.srcDirs "${projectDir}/.java"
}

tasks.withType(JavaCompile) {
	dependsOn compileBl
}

task assembleBl(type: Zip, group: 'build', dependsOn: [compileBl]) {
	archiveName "${project.name}-${project.version}.zip"
	destinationDir file("${buildDir}/libs/")
	from("${projectDir}/src/bl") {
		include '**/*.bl'
		includeEmptyDirs = false
	}
	description "Assemble archive ${archiveName} into ${relativePath(destinationDir)}"
}

assemble.dependsOn assembleBl

artifacts.add('bl', assembleBl) {
	type 'zip'
	builtBy assembleBl
}

publishing.publications {
	maven(MavenPublication) {
		from components.java
	}
	mavenBl(MavenPublication) {
		artifact source: assembleBl, extension: 'zip'
	}
}
