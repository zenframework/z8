[primary "org.zenframework.z8.server.types.string"]
public final class string extends primary {
	public operator sql_string();

	public operator exception();
	public operator binary();
	public operator file();

	public string operator + (string value);

	public bool operator < (string value);
	public bool operator > (string value);
	public bool operator <= (string value);
	public bool operator >= (string value);
	public bool operator == (string value);
	public bool operator != (string value);

	public int length();

	public bool isEmpty();

	public int compare(string anotherString);
	public int compareNoCase(string anotherString);

	public int indexOf(string subString);
	public int indexOf(string subString, int offset);

	public int lastIndexOf(string subString);
	public int lastIndexOf(string subString, int offset);

	public bool startsWith(string prefix);
	public bool startsWith(string prefix, int offset);

	public bool endsWith(string suffix);

	public string charAt(int index);

	public string substring(int index);
	public string substring(int index, int count);

	public string left(int count);
	public string right(int count);

	public string trim();
	public string trimLeft();
	public string trimRight();

	public string padLeft(int length);
	public string padLeft(int length, string padding);
	public string padRight(int length);
	public string padRight(int length, string padding);

	public string insert(int pos, string what);
	public string replace(int pos, int len, string replacement);

	public bool matches(string regex);

	/* usage of setupMatcher, next, getGroup
	*
	*    string str = "aBcDe";
	*    str.setupMatcher("([a-z])([A-Z])"); // two matches: "aB" and "cD"
	*    if(str.next()) { // takes the first match
	*        string pattern = str.getGroup(0); // pattern is "aB" since 0 denotes the entire pattern
	*        string group1 = str.getGroup(1);  // group1 is "a" - capturing groups are indexed from left to right starting at one
	*        string group2 = str.getGroup(2);  // group2 is "B"
	*    }
	*
	*/
	public void setupMatcher(string regex);
	public bool next();
	public string getGroup(int groupNumber);

	public string replaceFirst(string regex, string replacement);
	public string replaceAll(string regex, string replacement);

	public string[] split(string regex);
	public string[] split(string regex, int limit);

	public string toLowerCase();
	public string toUpperCase();
	public string firstToLowerCase();
	public string firstToUpperCase();

	public string format(primary[] frm); // {n} <=> [n]

	static public string replicate(string str, int count);
	static public string concat(string[] array, string delimeter);
}
