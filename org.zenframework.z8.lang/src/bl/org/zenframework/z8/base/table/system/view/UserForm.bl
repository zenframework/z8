import org.zenframework.z8.base.application.Application;
import org.zenframework.z8.base.form.Form;
import org.zenframework.z8.base.form.Listbox;
import org.zenframework.z8.base.form.Section;
import org.zenframework.z8.base.form.action.Action;
import org.zenframework.z8.base.form.action.ActionType;
import org.zenframework.z8.base.table.Sql;
import org.zenframework.z8.base.table.system.UserEntries;
import org.zenframework.z8.base.table.system.UserRoles;
import org.zenframework.z8.base.table.system.Users;
import org.zenframework.z8.base.table.value.Aggregation;
import org.zenframework.z8.base.table.value.Field;

[native "org.zenframework.z8.server.base.table.system.view.UserForm"]
class UserForm extends Form {

	public Users users;

	protected Action resetPassword;
	resetPassword.type = ActionType.Primary;

	protected Section section2;
	section2.colSpan = 3;

	protected Section section3;
	section3.colSpan = 3;

	protected UserEntries userEntries;
	userEntries.position.editable = true;
	userEntries.columns = { userEntries.entries.name, userEntries.position };
	userEntries.sortFields = { userEntries.position };

	protected Listbox entriesListbox;
	entriesListbox.query = userEntries;
	entriesListbox.link = userEntries.user;
	entriesListbox.flex = 1;

	protected UserRoles userRoles = class {
		columns = { roles.name };

		roles = class {
			virtual protected void beforeRead() {
				super.beforeRead();
				UserRoles ролиПользователя;
				ролиПользователя.role.aggregation = Aggregation.Array;
				if(ролиПользователя.aggregate(Field[] { ролиПользователя.role }, ролиПользователя.user == container.container.users.recordId.get()))
					addWhere(!Sql.inVector(recordId, ролиПользователя.role.array()));
			}
		};

		virtual protected void beforeCreate(guid recordId) {
			super.beforeCreate(recordId);
			UserRoles ролиПользователя;
			if(ролиПользователя.readFirst(Field[] { }, ролиПользователя.user == user.get() && ролиПользователя.role == role.get()))
				throw "This role has already been added";
		}
	};

	protected Listbox rolesListbox;
	rolesListbox.query = userRoles;
	rolesListbox.link = userRoles.user;
	rolesListbox.source = new RoleTableAccessView;
	rolesListbox.flex = 1;

	users.name.colSpan = 3;
	users.name.editable = true;

	users.banned.colSpan = 3;
	[icon "fa-ban"] users.banned;

	users.changePassword.colSpan = 3;
	[icon "fa-key"] users.changePassword;

	users.firstName.colSpan = 3;

	users.lastName.colSpan = 3;
	users.lastName.editable = true;

	users.middleName.colSpan = 3;

	users.phone.colSpan = 3;
	users.email.colSpan = 3;

	users.company.colSpan = 3;
	users.position.colSpan = 3;

	users.description.colSpan =12;
	users.description.height = 3;

	entriesListbox.colSpan = 6;
	rolesListbox.colSpan = 6;

	colCount = 12;
	readOnly = !Application.user().isAdministrator();

	controls = {
		users.name, users.banned, users.changePassword, resetPassword,
		users.lastName, users.firstName, users.middleName, section2,
		users.phone, users.email, section3,
		users.company, users.position,
		users.description,
		rolesListbox,
		entriesListbox
	};
}