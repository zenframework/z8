apply plugin: 'java'

configurations {
	boot

	bl {
		canBeResolved = false
		canBeConsumed = true
		attributes {
			attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE,
					project.objects.named(LibraryElements, 'bl'))
		}
	}
}

dependencies {
	boot project(':org.zenframework.z8.boot')

	compile project(':org.zenframework.z8.boot')

	compile ("org.zenframework.z8.dependencies:z8-dependencies-commons:${dependenciesVersion}@pom") { transitive = true }
	compile ("org.zenframework.z8.dependencies:z8-dependencies-libreoffice:${dependenciesVersion}@pom") { transitive = true }
	compile ("org.zenframework.z8.dependencies:z8-dependencies-birt:${dependenciesVersion}@pom") { transitive = true }
}

eclipse.classpath.file.whenMerged {
	entries.findAll { entry ->
		entry instanceof org.gradle.plugins.ide.eclipse.model.Container
	}.each { entry ->
		entry.accessRules.add new org.gradle.plugins.ide.eclipse.model.AccessRule('0', 'sun/rmi/**')
	}
}

tasks.withType(JavaCompile) {
	doFirst {
		options.compilerArgs.add '-Xbootclasspath/p:' + configurations.boot.singleFile.toPath()
	}
}

task assembleBl(type: Zip, group: 'build') {
	description "Assemble archive ${archiveName} into ${relativePath(destinationDir)}"

	archiveName "${project.name}-${project.version}.zip"
	destinationDir file("${buildDir}/libs/")

	from(projectDir) {
		include 'WEB-INF/**/*'
		includeEmptyDirs = false
	}
}

assemble.dependsOn assembleBl

artifacts.add('bl', assembleBl) {
	type 'zip'
	builtBy assembleBl
}

publishing.publications {
	maven(MavenPublication) {
		from components.java
	}
	mavenBl(MavenPublication) {
		artifact source: assembleBl, extension: 'zip'
	}
}
